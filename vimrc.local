set nocompatible

syntax on                 " 支持语法高亮显示
" set number                " show line number.
set hidden
" set relativenumber
set cursorline " displays a line on the line where the cursor is
filetype plugin indent on " 启用根据文件类型自动缩进
" set mouse=a
set wrap
set showcmd
set ignorecase
set smartcase
set encoding=utf-8
set fileencodings=ucs-bom,utf-8,gbk,big5,gb18030,latin1

" modify cursor pattern.
" let &t_ut=''
" let &t_SI = "\<Esc>]50;CursorShape=1\x7"
" let &t_SR = "\<Esc>]50;CursorShape=2\x7"
" let &t_EI = "\<Esc>]50;CursorShape=0\x7"

set path=.,**
set wildmenu
set wildmode=longest:list,full


set hlsearch
exec "nohlsearch"
set incsearch

set list
set listchars=tab:»·,nbsp:+,trail:·,extends:→,precedes:←


set autoindent            " 开始新行时处理缩进
set expandtab             " 将制表符Tab展开为空格，这对于Python尤其有用
set tabstop=2             " 要计算的空格数
set softtabstop=2
set shiftwidth=2          " 用于自动缩进的空格数
set tw=0
set backspace=2           " 在多数终端上修正退格键Backspace的行为
set foldlevel=99
set laststatus=2

if v:version > 800
  set completeopt=longest,noinsert,menuone,noselect,preview
endif

set scrolloff=5
set sidescroll=10
set clipboard=unnamedplus

" show count of matches
set shortmess-=S

" restore cursor position which last was.
au BufReadPost * if line("'\"") > 2 && line("'\"") <= line("$") | exe "normal! g'\"zz" | endif

silent !mkdir -p $HOME/.vim/tmp/backup
silent !mkdir -p $HOME/.vim/tmp/undo
silent !mkdir -p $HOME/.vim/tmp/session
set backupdir=$HOME/.vim/tmp/backup,.
set directory=$HOME/.vim/tmp/backup,.

set undofile
set undodir=$HOME/.vim/tmp/undo,.

" mappings
let mapleader=" "

vmap <C-c> y
vmap <C-v> p
imap <C-v> <esc>pa
" map <S-C-v> p


nnoremap [e  :<c-u>execute 'move -1-'. v:count1<cr>
nnoremap ]e  :<c-u>execute 'move +'. v:count1<cr>

nnoremap [<leader>  :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
nnoremap ]<leader>  :<c-u>put =repeat(nr2char(10), v:count1)<cr>
nnoremap <leader>, A,<esc>
nnoremap <leader>; A;<esc>

nnoremap n nzz
nnoremap N Nzz
onoremap b vb
onoremap F vF
onoremap T vT
nmap 0 _

nmap . .`[

imap <C-e> <end>
imap <C-a> <home>
inoremap <a-b> <C-o>b
imap <a-f> <C-o>w

imap <C-d> <del>
" 使用<Ctrl> + hjkl快速在窗口间跳转
noremap <c-h> <c-w><c-h>
noremap <c-j> <c-w><c-j>
noremap <c-k> <c-w><c-k>
noremap <c-l> <c-w><c-l>

noremap j gj
noremap k gk

map <leader>\| :set splitright<CR>:vsplit<CR>
map <leader>sj :set nosplitright<CR>:vsplit<CR>
map <leader>- :set nosplitbelow<CR>:split<CR>
map <leader>sk :set splitbelow<CR>:split<CR>

noremap <LEADER><CR> :nohlsearch<CR>

noremap <leader>q :q<cr>
noremap <leader><C-q> :q!<cr>
noremap <leader>w :w<cr>
noremap <leader>x :x<cr>
noremap ; :
noremap > >>
noremap < <<
vnoremap > >gv
vnoremap < <gv
inoremap <C-T> <C-F>
noremap 0 _


" yankhighlight plugin settings
if !exists('##TextYankPost')
  nmap y <Plug>(highlightedyank)
  xmap y <Plug>(highlightedyank)
  omap y <Plug>(highlightedyank)
endif
let g:highlightedyank_highlight_duration = 500

hi Cursor gui=NONE cterm=NONE guibg=#F92672 guifg=white ctermbg=47 ctermfg=black
hi CursorLine guibg=#303030 ctermbg=236 cterm=NONE
hi! link CursorColumn CursorLine
hi! link CursorLineSign CursorLine
hi! link CursorLineFold CursorLine
hi! link LineNr CursorLine
hi! link SignColumn Normal
hi! link CursorLineNr Normal
hi QuickFixLine guifg=black guibg=cyan ctermfg=black ctermbg=lightmagenta
hi! Search ctermbg=LightCyan ctermfg=black guibg=LightCyan guifg=black
hi! link IncSearch QuickFixLine
hi! link CurSearch IncSearch
hi! link Substitute QuickFixLine

hi Visual gui=NONE cterm=NONE guifg=black guibg=white ctermfg=black ctermbg=white

